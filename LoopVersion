import openai
import pandas as pd
import os
from dotenv import load_dotenv

# Load environment variables from .env file 
load_dotenv(r"C:\Users\Cagi\API.env")

# Initialize OpenAI client
client = openai.OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
)

# Load the Excel file
file_path = r"C:\Users\Cagi\Desktop\LogProb_Sheridan.xlsx"
df = pd.read_excel(file_path)

# Number of runs to average
num_runs = 10

# Prepare a list to store results
results = []

# Iterate over each row in the DataFrame
for index, row in df.iterrows():
    sentence = row['Full Sentence']
    target_word = row['Target']

    # List to store log probabilities for each run
    logprobs_list = []

    for _ in range(num_runs):
        # Get log probabilities for the sentence
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": "You need to echo the input of the user. Do not generate any new content."},
                {"role": "user", "content": sentence},
            ],
            model="gpt-3.5-turbo-0125",
            temperature=0,
            logprobs=True,
        )

        # Extract log probabilities for each token
        tokens_data = [
            {
                "token": logprob.token.strip(),  # Strip leading/trailing spaces
                "logprob": logprob.logprob,
                "bytes": logprob.bytes,
            }
            for logprob in chat_completion.choices[0].logprobs.content
        ]

        # Find the log probability of the target word
        for token_data in tokens_data:
            if token_data["token"] == target_word:
                logprobs_list.append(token_data["logprob"])
                break

    # Calculate the average log probability for the target word
    if logprobs_list:
        avg_logprob = sum(logprobs_list) / len(logprobs_list)
    else:
        avg_logprob = None

    results.append({
        "Sentence": sentence,
        "Target Word": target_word,
        "Average Log Probability": avg_logprob
    })

# Convert results to a DataFrame
df_results = pd.DataFrame(results)

# Save the results to a new Excel file
output_file_path = r"C:\Users\Cagi\Desktop\LogProb_Sheridan_Results.xlsx"
df_results.to_excel(output_file_path, index=False)

print(f"Results saved to {output_file_path}")
